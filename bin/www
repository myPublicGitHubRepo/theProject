#!/usr/bin/env node

/**
 * Copyright Ⓒ 2016 Splinxs
 * Authors: Elia Kocher, Philippe Lüthi
 * This file is part of Splinxs.
 * 
 * Splinxs is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License V3 as published by
 * the Free Software Foundation, see <http://www.gnu.org/licenses/>.
 */

/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */
//var port = normalizePort(process.env.PORT || '443');

app.set('port', 8080);

/**
 * Create HTTPS server.
 */
/*
 var server = https.createServer({
 key: fs.readFileSync('/etc/letsencrypt/live/www.splinxs.com/privkey.pem'),
 cert: fs.readFileSync('/etc/letsencrypt/live/www.splinxs.com/cert.pem'),
 ca: fs.readFileSync('/etc/letsencrypt/live/www.splinxs.com/chain.pem')
 }, app);
*/
//for local usage use fake certificates
/*
var server = https.createServer({
	key: fs.readFileSync('./selfCert/key.pem'),
	cert: fs.readFileSync('./selfCert/cert.pem')
}, app);
*/
http.createServer(app);
/**
 * Socket.io
 */
var io = app.io;
io.attach(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP(S) server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP(S) server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}